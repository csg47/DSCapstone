# Import required libraries
import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

#print("hi")
##print(spacex_df["Launch Site"].unique())#

# Create a dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                                 dcc.Dropdown(  id='site-dropdown',
                                                options=[
                                                  {'label': 'All Sites', 'value': 'ALL'},
                                                  {'label': 'CCAFS LC-40', 'value': 'CCAFS LC-40'},
                                                  {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},
                                                  {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},
                                                  {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'}
                                                ],
                                                value='ALL',
                                                placeholder="Select a Launch Site",
                                                searchable=True
                                                ),

                                # TASK 2: Add a pie chart to show the total successful first stage landings count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
                                html.Div(dcc.Graph(id='success-pie-chart')),
                                html.Br(),

                                html.P("Payload Range (Kg):"),
                                # TASK 3: Add a slider to select payload range
                                dcc.RangeSlider(id='payload-slider',
                                                min=0, max=10000, step=1000,
                                                marks={0: '0', 100: '100'},
                                                value=[min_payload, max_payload]),

                                # TASK 4: Add a scatter chart to show the correlation between 
                                # payload and landing success
                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),

                        ]) # End of app layout

# TASK 2:
# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output
# Function decorator to specify function input and output
import plotly.express as px

@app.callback(
    Output(component_id='success-pie-chart', component_property='figure'),
    Input(component_id='site-dropdown', component_property='value')
)
def get_pie_chart(entered_site):
    filtered_df = spacex_df
    
    if entered_site == 'ALL':
        totalSuccess = spacex_df.groupby('Launch Site')['class'].sum()
        fig = px.pie(
            values=totalSuccess.values, 
            names=totalSuccess.index, 
            title='Successful 1st Stage Landings'
        )
        return fig
    else:
        filtered_df = filtered_df[filtered_df['Launch Site'] == entered_site]
        class_counts = filtered_df.groupby('class')['class'].count()
        total_count = class_counts.sum()
                
        fig = px.pie(
            values=class_counts.values, 
            names=class_counts.index, 
            title=f'1st Stage Landing Outcomes: {entered_site} with {total_count} total launches'
        )
        return fig


# TASK 4:
# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output
@app.callback( Output(component_id='success-payload-scatter-chart', component_property='figure'),
               [Input(component_id='site-dropdown', component_property='value'), 
               Input(component_id="payload-slider", component_property="value")])

def get_scatter_plot(entered_site, entered_payload):
    
    filtered_df = spacex_df
    # If ALL sites are selected, render a scatter plot to display all values
    # for variable Payload Mass (kg) and variable class.  In addition, 
    # the point color needs to be set to the booster version 
    # i.e., color="Booster Version Category"
    Min_Payload = entered_payload[0]
    Max_Payload = entered_payload[1]
    range_df = spacex_df[spacex_df['Payload Mass (kg)'].between(Min_Payload, Max_Payload)]
    
    if entered_site == 'ALL':
        
        fig = px.scatter(   range_df, 
                            x=range_df['Payload Mass (kg)'], 
                            y=range_df['class'],
                            title='Correlation between Payload and Landing Success for all Sites',
                            color = range_df['Booster Version Category'],
                            )
        return fig

    # If a specific launch site is selected, you need to filter the 
    # spacex_df first, and render a scatter chart to show values 
    # Payload Mass (kg) and class for the selected site, and color-label 
    # the point using Booster Version Category likewise.
    else:
        filtered_df = range_df[range_df["Launch Site"] == entered_site]
        fig = px.scatter(   filtered_df, 
                            x=filtered_df['Payload Mass (kg)'], 
                            y=filtered_df['class'],
                            title=f'Correlation between Payload and Landing Success for {entered_site}',
                            color = filtered_df['Booster Version Category']
                            )
        return fig


# Run the app
if __name__ == '__main__':
    app.run_server()
